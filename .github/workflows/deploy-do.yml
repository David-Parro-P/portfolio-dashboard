name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: "statement-analytics"
  DEPLOY_PATH: "/opt/statement-analytics"

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          
      - name: Install dependencies
        working-directory: ./processor
        run: poetry install --no-root
        
      - name: Run tests
        working-directory: ./processor
        run: poetry run pytest

  build-and-push:
    needs: [test]
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: Build and push processor image
        uses: docker/build-push-action@v4
        with:
          context: ./processor
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}-processor:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}-processor:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}-processor:buildcache,mode=max
          
  deploy:
    needs: build-and-push
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v3

      - name: Create deployment directory structure
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: IMAGE_NAME,DEPLOY_PATH
          script: |
            mkdir -p ${{ env.DEPLOY_PATH }}/nginx/conf.d
            mkdir -p ${{ env.DEPLOY_PATH }}/nginx/ssl
            
      - name: Create .env file
        run: |
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "N8N_HOST=${{ secrets.HETZNER_HOST }}" >> .env
          echo "N8N_USER=${{ secrets.N8N_USER }}" >> .env
          echo "N8N_PASSWORD=${{ secrets.N8N_PASSWORD }}" >> .env
          echo "METABASE_ADMIN_EMAIL=${{ secrets.METABASE_ADMIN_EMAIL }}" >> .env
          echo "METABASE_ADMIN_PASSWORD=${{ secrets.METABASE_ADMIN_PASSWORD }}" >> .env
          echo "N8N_ENCRYPTION_KEY=${{ secrets.N8N_ENCRYPTION_KEY }}" >> .env

      - name: Create SSL certificates
        run: |
          echo "${{ secrets.SSL_CERTIFICATE }}" > certificate.crt
          echo "${{ secrets.SSL_PRIVATE_KEY }}" > private.key

      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ".env,docker-compose.yml,nginx/conf.d/default.conf,certificate.crt,private.key"
          target: ${{ env.DEPLOY_PATH }}
          overwrite: true

      - name: Move SSL certificates
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            mv certificate.crt nginx/ssl/
            mv private.key nginx/ssl/
            chmod 600 nginx/ssl/private.key
            
      - name: Deploy to Hetzner
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: IMAGE_NAME
          script: |
            cd ${{ env.DEPLOY_PATH }}
            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker compose pull
            docker compose up -d
            docker system prune -f
            docker logout

      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: IMAGE_NAME,DEPLOY_PATH
          script: |
            cd ${{ env.DEPLOY_PATH }}
            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            if ! docker compose ps --quiet | grep -q .; then
              echo "Deployment verification failed: No containers are running"
              docker compose logs
              exit 1
            else
              echo "Deployment successful: Containers are running"
              docker compose ps
            fi

      - name: Debug on Failure
        if: failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            echo "Current directory contents:"
            ls -la
            echo "Docker Compose file contents:"
            cat docker-compose.yml
            echo "Environment file contents (secrets redacted):"
            grep -v "PASSWORD\|KEY\|TOKEN" .env
            echo "Docker Compose Status:"
            docker compose ps
            echo "Docker Compose Logs:"
            docker compose logs