name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: "statement-analytics"

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          
      - name: Install dependencies
        working-directory: ./processor
        run: poetry install --no-root
        
      - name: Run tests
        working-directory: ./processor
        run: poetry run pytest

  build-and-push:
    needs: [test]
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: Build and push processor image
        uses: docker/build-push-action@v4
        with:
          context: ./processor
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}-processor:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}-processor:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}-processor:buildcache,mode=max
          
  deploy:
      needs: build-and-push
      runs-on: ubuntu-22.04
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      environment: production
      
      steps:
        - uses: actions/checkout@v3
        - name: Create .env file
          run: |
            echo "N8N_USER=${{ secrets.N8N_USER }}" >> .env
            echo "N8N_PASSWORD=${{ secrets.N8N_PASSWORD }}" >> .env
            echo "METABASE_ADMIN_EMAIL=${{ secrets.METABASE_ADMIN_EMAIL }}" >> .env
            echo "METABASE_ADMIN_PASSWORD=${{ secrets.METABASE_ADMIN_PASSWORD }}" >> .env

        - name: Copy .env to VPS
          uses: appleboy/scp-action@master
          with:
            host: ${{ secrets.DROPLET_HOST }}
            username: ${{ secrets.DROPLET_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            source: ".env"
            target: "/opt/statement-analytics"
        
        - name: Deploy to DigitalOcean Droplet
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.DROPLET_HOST }}
            username: ${{ secrets.DROPLET_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            script: |
              cd /opt/statement-analytics
              echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
              docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
              docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
              docker logout